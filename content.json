[{"title":"谷歌技巧篇","date":"2017-03-30T08:15:36.923Z","path":"joan.github.io/2017/03/30/谷歌技巧篇/","text":"一、在浏览器上直接修改本地代码 打开审查元素，进入sources，空白区右击add folder，直接导入本地项目，在浏览器上面修改你导入的代码，随着本地也同时修改，主要作用就是防止相同的代码编写两次。不过随着技术的更新换代，我现在觉得这个没什么必要了，热更新技术的出现可取代这种情况。","tags":[{"name":"skill","slug":"skill","permalink":"http://ms-yan.github.io/joan.github.io/tags/skill/"}]},{"title":"无尽滚动的复杂度","date":"2017-03-30T08:15:36.922Z","path":"joan.github.io/2017/03/30/无尽滚动的复杂度/","text":"摘要: 重用你的DOM元素以及删除那些远离可视范围的元素。为延迟显示的元素使用占位符。这里是一个无尽滚动的演示和代码。 无尽滚动在互联网上到处都有应用。Google Music的艺术家列表是一个，Facebook的时间线是一个，Tweeter的话题列表也是一个。当你向下滚动，新的内容就神奇的“无中生有”了。这是一个得到广泛赞扬的、非常好的用户体验。 在这个无尽滚动背后的技术挑战其实比它看上去要难。当你想做正确的事时，你遇到的问题是巨大的。开始时是一些比较简单的事情，比如在页面尾部的链接是无法点击的，因为内容不断的把它们“挤”走。但是问题逐渐开始变得越来越难：当用户将手机从竖屏改为横屏时你该如何处理 resize 事件？或者当列表过长时你如何避免手机的卡顿？ [译] 无尽滚动的复杂度 – 来自 Google 大神的拆解 原文链接","tags":[{"name":"-skill","slug":"skill","permalink":"http://ms-yan.github.io/joan.github.io/tags/skill/"}]},{"title":"多台电脑发表博客","date":"2017-03-30T08:15:36.921Z","path":"joan.github.io/2017/03/30/方便多台电脑发表博客/","text":"创建仓库，xxx.github.io； 创建两个分支：master 与 hexo-source； 设置hexo-source为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； 使用git clone git@github.com:xxx/xxx.github.io.git拷贝仓库； 在本地xxx.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo-source）; 修改_config.yml中的deploy参数，分支应为master；(重要) 依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件； 执行hexo generate -d生成网站并部署到GitHub上。 这样一来，在GitHub上的xxx.github.io仓库就有两个分支，一个hexo-source分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！","tags":[{"name":"skill","slug":"skill","permalink":"http://ms-yan.github.io/joan.github.io/tags/skill/"}]},{"title":"广告创意之——王老吉","date":"2017-03-30T08:15:36.920Z","path":"joan.github.io/2017/03/30/广告创意之--王老吉/","text":"上周末从朋友家回来时，在公交车站看见了一个很不错的推广，公交车站站牌一般都是用来打广告的，王老吉则将其发挥到极致，拍一拍，只要在站牌上拍一拍，一瓶可口的王老吉从站牌内部掉了出来；想一想，在烈日下等待公车的时间是多么的焦躁和不爽，但是以上这个方法刚好抓住了人们的这个心里，在等待公车的这个时间里，既能愉快的玩一把游戏，又能免费喝上一瓶可口的饮料；与此同时，创办方得到了自己想要的效果；广告商也得到了利益。真是一箭三雕的结局！ 点个赞。","tags":[{"name":"idea","slug":"idea","permalink":"http://ms-yan.github.io/joan.github.io/tags/idea/"}]},{"title":"一本可以喝的书","date":"2017-03-30T08:15:36.919Z","path":"joan.github.io/2017/03/30/一本可以喝的书/","text":"","tags":[{"name":"idea","slug":"idea","permalink":"http://ms-yan.github.io/joan.github.io/tags/idea/"}]},{"title":"ios系统解锁字滑动效果","date":"2017-03-30T08:15:36.919Z","path":"joan.github.io/2017/03/30/ios系统解锁字滑动效果/","text":"12345678910111213141516171819202122232425color: #382385; font-size: 1.4rem; -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-color:#19385c; background-image: -webkit-linear-gradient(-45deg, rgba(0, 0, 0, 0.6) 30%, #aff0ff 50%, rgba(0, 0, 0, 0.6) 70%); background-blend-mode: hard-light; background-size: 200%; -webkit-animation: shine 4s infinite; @-webkit-keyframes shine &#123; from &#123;background-position: 100%;&#125; to &#123;background-position: 0;&#125; &#125;","tags":[{"name":"skill","slug":"skill","permalink":"http://ms-yan.github.io/joan.github.io/tags/skill/"}]},{"title":"hexo","date":"2017-03-30T08:15:36.918Z","path":"joan.github.io/2017/03/30/hexo/","text":"Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.","tags":[{"name":"quote","slug":"quote","permalink":"http://ms-yan.github.io/joan.github.io/tags/quote/"}]},{"title":"git配置多个SSH-Key","date":"2017-03-30T08:15:36.917Z","path":"joan.github.io/2017/03/30/git配置多个SSH-Key/","text":"具体操作步骤1、生成一个公司用的SSH-Key1$ ssh-keygen -t rsa -C &quot;youremail@yourcompany.com&quot; -f ~/.ssh/id_rsa 在~/.ssh/目录会生成id_rsa和id_rsa.pub私钥和公钥。 我们将id-rsa.pub中的内容粘帖到公司gitlab服务器的SSH-key的配置中 2、生成一个github用的SSH-Key1$ ssh-keygen -t rsa -C &quot;youremail@your.com&quot; -f ~/.ssh/github_rsa 在~/.ssh/目录会生成github_rsa和github_rsa.pub私钥和公钥。 我们将github_rsa.pub中的内容粘帖到github服务器的SSH-key的配置中 3、添加私钥1$ ssh-add ~/.ssh/id_rsa $ ssh-add ~/.ssh/github_rsa 如果执行ssh-add时提示”Could not open a connection to your authentication agent”，可以现执行命令： 1$ ssh-agent bash 然后再运行ssh-add命令 1234# 可以通过 ssh-add -l 来确私钥列表$ ssh-add -l# 可以通过 ssh-add -D 来清空私钥列表$ ssh-add -D 4、修改配置文件在 ~/.ssh 目录下新建一个config文件 1touch config 添加内容 12345678910# gitlabHost gitlab.com HostName gitlab.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa# githubHost github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_rsa 6、测试1$ ssh -T git@github.com 输出Hi stefzhlg! You’ve successfully authenticated, but GitHub does not provide shell access. 就表示成功的连上github了.也可以试试链接公司的gitlab","tags":[{"name":"-tool","slug":"tool","permalink":"http://ms-yan.github.io/joan.github.io/tags/tool/"}]}]